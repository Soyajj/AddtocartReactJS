{"version":3,"sources":["components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","props","decrement","index","items","concat","state","quantity","inCart","setState","increment","addToCart","message","cart","display","console","log","id","uuid","title","className","onClick","this","map","item","key","disabled","style","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"iRA+HeA,EA5Hf,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAoCVC,UAAY,SAACC,GACX,IAAMC,EAAQ,GAAGC,OAAO,EAAKC,MAAMF,OAChCA,EAAMD,GAAOI,SAAU,EACtBH,EAAMD,GAAOI,UAAY,GAGzBH,EAAMD,GAAOI,SAAW,EACxBH,EAAMD,GAAOK,QAAS,GAE1B,EAAKC,SAAS,CACVL,MAAQA,KA/CI,EAmDlBM,UAAY,SAACP,GACT,IAAMC,EAAQ,GAAGC,OAAO,EAAKC,MAAMF,OACnCA,EAAMD,GAAOI,UAAY,EACzBH,EAAMD,GAAOK,QAAS,EACtB,EAAKC,SAAS,CACVL,MAAQA,KAxDE,EA4DlBO,UAAY,SAACR,GACV,IAAMC,EAAQ,GAAGC,OAAO,EAAKC,MAAMF,QACR,IAAxBA,EAAMD,GAAOK,QACXJ,EAAMD,GAAOK,QAAUJ,EAAMD,GAAOK,OACpCJ,EAAMD,GAAOS,QAAb,mBACA,EAAKH,SAAS,CACVI,KAAO,EAAKP,MAAMO,KAAO,EACzBT,MAAQA,MAGe,IAAxBA,EAAMD,GAAOK,SACjBJ,EAAMD,GAAOK,QAAUJ,EAAMD,GAAOK,OACpCJ,EAAMD,GAAOI,SAAW,EACxBH,EAAMD,GAAOS,QAAb,cACA,EAAKH,SAAS,CACVI,KAAO,EAAKP,MAAMO,KAAM,MA3EjB,EA+ElBC,QAAU,WACNC,QAAQC,IAAI,EAAKV,MAAMF,QA9EvB,EAAKE,MAAM,CACPF,MAAQ,CACJ,CACIa,GAAKC,eACLC,MAAQ,QACRZ,SAAW,EACXC,QAAS,EACTI,QAAO,eAEX,CACIK,GAAKC,eACLC,MAAQ,QACRZ,SAAW,EACXC,QAAS,EACTI,QAAO,eAEX,CACIK,GAAKC,eACLC,MAAQ,QACRZ,SAAW,EACXC,QAAS,EACTI,QAAO,eAEX,CACIK,GAAKC,eACLC,MAAQ,QACRZ,SAAW,EACXC,QAAS,EACTI,QAAO,gBAGfC,KAAO,GAjCG,EADtB,qDAqFc,IAAD,OACL,OACI,yBAAKO,UAAY,YACb,4BACIA,UAAY,kBACZC,QAAWC,KAAKR,SAFpB,QAGa,0BAAMM,UAAY,qBAAlB,IAAwCE,KAAKhB,MAAMO,OAEhE,6BACCS,KAAKhB,MAAMF,MAAMmB,KAAI,SAACC,EAAMrB,GAAP,OAClB,yBAAKsB,IAAOD,EAAKP,IACZO,EAAKL,MADV,KAEI,4BACIC,UAAY,oBACZM,SAA6B,qBAAjBF,EAAKZ,QACjBS,QAAU,kBAAK,EAAKnB,UAAUC,KAHlC,KAKA,0BACIiB,UAAY,oBACZO,MAAQ,CAACC,MAAQ,QAASJ,EAAKjB,UAEnC,4BACIa,UAAY,oBACZM,SAA6B,qBAAjBF,EAAKZ,QACjBS,QAAW,kBAAK,EAAKX,UAAUP,KAHnC,KAKA,4BACIiB,UAA6B,gBAAjBI,EAAKZ,QAA4B,kBAAoB,iBACjEc,WAAYF,EAAKjB,SAAW,GAC5Bc,QAAW,kBAAK,EAAKV,UAAUR,KAASqB,EAAKZ,mBAlHzE,GAA8BiB,aCUfC,MATf,WACI,OACE,yBAAKV,UAAY,OACf,kBAAC,EAAD,QCKYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMpC,c","file":"static/js/main.9216d448.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {v4 as uuid} from 'uuid';\n\nexport class MainPage extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            items : [\n                {\n                    id : uuid(),\n                    title : 'Item1',\n                    quantity : 0,\n                    inCart : false,\n                    message : `Add to Cart`\n                },\n                {\n                    id : uuid(),\n                    title : 'Item3',\n                    quantity : 0,\n                    inCart : false,\n                    message : `Add to Cart`\n                },\n                {\n                    id : uuid(),\n                    title : 'Item4',\n                    quantity : 0,\n                    inCart : false,\n                    message : `Add to Cart`\n                },\n                {\n                    id : uuid(),\n                    title : 'Item5',\n                    quantity : 0,\n                    inCart : false,\n                    message : `Add to Cart`\n                }\n            ],\n            cart : 0 , \n        }\n    }\n\n    decrement = (index) =>{  \n      const items = [].concat(this.state.items);\n      if(items[index].quantity >1){\n          items[index].quantity -= 1\n      }\n      else{\n          items[index].quantity = 0\n          items[index].inCart = false\n      }\n      this.setState({\n          items : items\n      })        \n    }\n\n    increment = (index) =>{\n        const items = [].concat(this.state.items);\n        items[index].quantity += 1\n        items[index].inCart = true\n        this.setState({\n            items : items\n        })    \n    }\n\n    addToCart = (index) => {\n       const items = [].concat(this.state.items)\n       if(items[index].inCart === true){\n            items[index].inCart = !items[index].inCart\n            items[index].message = `Remove from Cart`\n            this.setState({\n                cart : this.state.cart + 1,\n                items : items\n            })\n       }\n       else if(items[index].inCart === false){\n           items[index].inCart = !items[index].inCart\n           items[index].quantity = 0\n           items[index].message = `Add to Cart`\n           this.setState({\n               cart : this.state.cart -1\n           })\n       }\n    }\n    display = () =>{\n        console.log(this.state.items)\n\n    }\n\n    render() {\n        return (\n            <div className = \"mainpage\"> \n                <button \n                    className = \"btn btn-primary\"\n                    onClick = {this.display}>\n                        Cart <span className = \"badge badge-light\"> {this.state.cart}</span>\n                </button>\n                <div>\n                {this.state.items.map((item, index) =>(\n                    <div key = {item.id}>\n                        {item.title} -\n                        <button \n                            className = \"btn btn-secondary\"\n                            disabled = {item.message === 'Remove from Cart' ? true : false}\n                            onClick ={() =>this.decrement(index)}>-\n                        </button>\n                        <span \n                            className = \"badge badge-light\" \n                            style ={{width : '2vw'}}>{item.quantity}\n                        </span>\n                        <button \n                            className = \"btn btn-secondary\"\n                            disabled = {item.message === 'Remove from Cart' ? true : false}\n                            onClick = {() =>this.increment(index)}>+\n                        </button>\n                        <button \n                            className ={item.message === 'Add to Cart' ? 'btn btn-success' : 'btn btn-danger'} \n                            disabled = {item.quantity > 0 ? false : true} \n                            onClick = {()=> this.addToCart(index)}>{item.message}\n                        </button>\n                    </div>\n                ))} \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainPage\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n\nfunction App(){\n    return (\n      <div className = \"App\">\n        <MainPage />\n      </div>\n    )\n  }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}